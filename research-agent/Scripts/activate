import streamlit as st
import requests
import whisper
import tempfile
import streamlit_audiorec as st_audiorec

# Whisper model (lightweight)
model = whisper.load_model("tiny")

# UI setup
st.set_page_config(page_title="Research Assistant", page_icon="🎙️")
st.title("🤖 Multi-Agent Research Assistant")
st.subheader("Ask via Text or Voice and get latest research papers + AI summary")

# Input type: text or voice
input_mode = st.radio("Select input type:", ["Text", "Voice"])
user_input = None

if input_mode == "Text":
    user_input = st.text_input("Enter your research question:")
else:
    st.info("🎙️ Click to record your voice:")
    wav_audio_data = st_audiorec()

    if wav_audio_data is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as f:
            f.write(wav_audio_data)
            temp_path = f.name

        result = model.transcribe(temp_path)
        user_input = result["text"]
        st.success(f"📝 Transcribed: {user_input}")

# When user submits
if st.button("🔍 Search & Summarize") and user_input:
    with st.spinner("Thinking..."):
        try:
            response = requests.post(
                "http://localhost:8000/ask",
                json={"user_input": user_input, "modality": input_mode.lower()}
            )

            if response.status_code == 200:
                data = response.json()
                summary = data.get("summary", "")
                search_results = data.get("search_results", [])

                st.success("✅ Done!")

                st.subheader("🧠 Summary")
                if summary:
                    st.write(summary)
                else:
                    st.warning("No summary generated.")

                st.subheader("📄 Top Papers")
                if search_results:
                    for i, paper in enumerate(search_results[:3]):
                        title = paper.get("title", f"Paper {i+1}")
                        paper_summary = paper.get("summary", "No summary available.")
                        link = paper.get("link", "")

                        st.markdown(f"**{i+1}. {title}**")
                        st.write(paper_summary)
                        if link:
                            st.markdown(f"[🔗 Link to paper]({link})")
                        else:
                            st.markdown("🔗 No link available.")
                        st.markdown("---")
                else:
                    st.warning("No papers found.")
            else:
                st.error(f"Error: {response.status_code} - {response.text}")

        except Exception as e:
            st.error(f"Request failed: {e}")
